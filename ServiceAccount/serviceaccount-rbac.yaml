# Complete ServiceAccount + RBAC example

# 1. ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pod-reader-sa
  namespace: development
---
# 2. Role (namespace-scoped permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: development
rules:
- apiGroups: [ "" ]
  resources: [ "pods" ]
  verbs: [ "get", "list", "watch" ]
- apiGroups: [ "" ]
  resources: [ "pods/log" ]
  verbs: [ "get" ]
---
# 3. RoleBinding (bind Role to ServiceAccount)
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding
  namespace: development
subjects:
- kind: ServiceAccount
  name: pod-reader-sa
  namespace: development
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
# 4. Pod using the ServiceAccount
apiVersion: v1
kind: Pod
metadata:
  name: pod-reader-app
  namespace: development
spec:
  serviceAccountName: pod-reader-sa # Use the ServiceAccount
  automountServiceAccountToken: true # Mount token (default: true)
  containers:
  - name: app
    image: nginx:alpine
    # This pod can now list pods in 'development' namespace
    # Token available at: /var/run/secrets/kubernetes.io/serviceaccount/token
    # Kubernetes 1.24+: Token is projected volume (auto-rotating, secure)

---
# ClusterRole example (cluster-wide permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-reader-cluster
rules:
- apiGroups: [ "" ]
  resources: [ "pods" ]
  verbs: [ "get", "list", "watch" ]
- apiGroups: [ "" ]
  resources: [ "nodes" ]
  verbs: [ "get", "list" ]
---
# ClusterRoleBinding (bind ClusterRole to ServiceAccount)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-reader-cluster-binding
subjects:
- kind: ServiceAccount
  name: pod-reader-sa
  namespace: development
roleRef:
  kind: ClusterRole
  name: pod-reader-cluster
  apiGroup: rbac.authorization.k8s.io
---
# CKAD Exam Scenario: Multiple ServiceAccounts
apiVersion: v1
kind: ServiceAccount
metadata:
  name: read-only-sa
  namespace: production
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: read-write-sa
  namespace: production
---
# Read-only Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: read-only
  namespace: production
rules:
- apiGroups: [ "" ]
  resources: [ "pods", "services", "configmaps" ]
  verbs: [ "get", "list", "watch" ]
---
# Read-write Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: read-write
  namespace: production
rules:
- apiGroups: [ "" ]
  resources: [ "pods", "services", "configmaps" ]
  verbs: [ "get", "list", "watch", "create", "update", "patch", "delete" ]
---
# Bind read-only Role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-only-binding
  namespace: production
subjects:
- kind: ServiceAccount
  name: read-only-sa
  namespace: production
roleRef:
  kind: Role
  name: read-only
  apiGroup: rbac.authorization.k8s.io
---
# Bind read-write Role
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-write-binding
  namespace: production
subjects:
- kind: ServiceAccount
  name: read-write-sa
  namespace: production
roleRef:
  kind: Role
  name: read-write
  apiGroup: rbac.authorization.k8s.io
---
# Pods with different permissions
apiVersion: v1
kind: Pod
metadata:
  name: read-only-pod
  namespace: production
spec:
  serviceAccountName: read-only-sa
  containers:
  - name: app
    image: nginx:alpine
    # Can only read pods, services, configmaps

---
apiVersion: v1
kind: Pod
metadata:
  name: read-write-pod
  namespace: production
spec:
  serviceAccountName: read-write-sa
  containers:
  - name: app
    image: nginx:alpine
    # Can create, update, delete pods, services, configmaps
